#!/bin/env bash

_swhich() {
	which $1 2>/dev/null >/dev/null
}

if ! _swhich default_targetbin; then
	default_targetbin(){
		basename `realpath .`
	}
fi

if ! _swhich default_bindir; then
	default_bindir(){
		echo -n "bin/"
	}
fi

if ! _swhich default_depdir; then
	default_depdir(){
		echo -n "dep/"
	}
fi

if ! _swhich default_libdir; then
	default_libdir(){
		echo -n "lib/"
	}
fi

ensure_directories(){
	if [ -z ${directories} ]; then
		directories=("quit" `find . -type d -not -path '*/.*' -printf "%P/\n"`)
		directories[1]="./"
	fi
}

get_srcdirs() {
	local PS3="Please select a number: "
	echo "
which of the following directories contain your source files? if source files are in nested directories, please submit all relevant directories"
	select option in "${directories[@]}"
	do
		if [ -z ${REPLY} -o ${REPLY} = "q" -o ${REPLY} = "quit" ]; then option="quit"; fi;
		case ${option} in
			"quit")
				echo "you have selected ${srcdirs[@]}"
				echo "is this correct? (y/n)"
				read reply
				if [ "${reply}" = "y" -o -z ${reply} ]; then
					break
				fi
				echo "selection canceled"
				exit 1
				;;
			*)
				echo "appended ${option} to source directories"
				srcdirs=(${srcdirs[@]} ${option})
				;;
		esac
	done
	echo "srcdirs=(`echo ${srcdirs[@]} | sed -E 's/$/"/; s/^/"/; s/ /" "/'`)" >> ${savefile}
}

get_incdirs() {
	local PS3="Please select a number: "
	echo "
which of the following directories contain your header files? if header files are in nested directories, please submit all relevant directories"
	select option in "${directories[@]}"
	do
		if [ -z ${REPLY} -o ${REPLY} = "q" -o ${REPLY} = "quit" ]; then option="quit"; fi;
		case ${option} in
			"quit")
				echo "you have selected ${incdirs[@]}"
				echo "is this correct? (y/n)"
				read reply
				if [ "${reply}" = "y" -o -z ${reply} ]; then
					break
				fi
				echo "selection canceled"
				exit 1
				;;
			*)
				echo "appended ${option} to header directories"
				incdirs=(${incdirs[@]} ${option})
				;;
		esac
	done
	echo "incdirs=(`echo ${incdirs[@]} | sed -E 's/$/"/; s/^/"/; s/ /" "/'`)" >> ${savefile}
}

update_srcfiles(){
	local new_srcfiles=`find ${srcdirs[*]} -maxdepth 1 -type f -name "*.${language}" -printf "%f " | sed -E 's/ $//g'`
	if [ ! "${new_srcfiles}" = "${srcfiles}" ]; then
		sed -i'' '/srcfiles.*/d' ${savefile}
		echo "srcfiles=\"${new_srcfiles}\"" >> ${savefile}
		echo "srcfiles changed to: ${new_srcfiles}"
		srcfiles="${new_srcfiles}"
		update_makefile
	else
		echo "no change to srcfiles"
	fi
}

update_makefile() {
	if [ -e "${makefile}" ]; then
		mv ${makefile} ${makefile}.bk
	fi
	echo "${maker_header}

SRC = ${srcfiles}
SRCDIR = ${srcdirs[@]}"'

BIN = $(addprefix $(BINDIR),$(SRC:%.c=%.o))'"
BINDIR = ${bindir}
" > ${makefile}
	if [ ! -z ${libdir} ]; then 
		echo "LIBDIR = ${libdir}
LIBRARIES = `find ${libdir} -mindepth 1 -type d -printf "%P/%P.a "`"'
LIB = $(addprefix $(LIBDIR),$(LIBRARIES))
' >> ${makefile}
	fi
	echo "INCDIR = ${incdirs[@]}"'
INC = $(addprefix -I,$(INCDIR) .)'"

DEPDIR = ${depdir}"'
DEPFLAGS = -MM -MF $@ -MT $@ -MT $(BINDIR)$(addsuffix .o,$(notdir $(basename $<)))
' >> ${makefile}
	if [ ${language} = "c" ]; then
		echo "CC = cc
CFLAGS = ${flags}"' $(INC)
' >> ${makefile}
	else
		echo "CXX = c++
CXXFLAGS = ${flags}"' $(INC)
' >> ${makefile}
	fi
	echo "NAME = ${targetbin}"'
VPATH = $(SRCDIR)
.DEFAULT_GOAL = $(NAME)
.PHONY : all clean fclean re
.PRECIOUS : $(BINDIR) $(DEPDIR)

include $(addprefix $(DEPDIR), $(SRC:%.c=%.d))

define libscmd
for dir in $(dir $(LIB)); do \
	$(MAKE) -C $$dir $(1); done ;
endef

$(LIB) :
	+$(MAKE) -C $(dir $@)

# Default commands
all : $(NAME)
clean :
	$(RM) -r $(BINDIR)
	+$(call libscmd, clean)
fclean :
	$(RM) -r $(BINDIR) $(DEPDIR)
	$(RM) $(NAME)
	+$(call libscmd, fclean)
re :
	+$(MAKE) fclean
	+$(MAKE)

%/ :
	mkdir -p $@

$(DEPDIR)%.d : %.'"${language}"' | $(DEPDIR)
	$('`if [ ${language} = "c" ];then echo "CC"; else echo "CXX"; fi`') $('`if [ ${language} = "c" ];then echo "CFLAGS"; else echo "CXXFLAGS"; fi`') $(CPPFLAGS) $(DEPFLAGS) $<

$(BINDIR)%.o : %.'"${language}"' | $(BINDIR)
	$('`if [ ${language} = "c" ];then echo "CC"; else echo "CXX"; fi`') $('`if [ ${language} = "c" ];then echo "CFLAGS"; else echo "CXXFLAGS"; fi`') $(CPPFLAGS) -c -o $@ $<

# Extra commands
run : $(NAME); ./$(NAME)' >> ${makefile}
	if [ ${language} = "c" ]; then
		echo 'debug : CFLAGS+=-g3' >> ${makefile}
	else
		echo 'debug : CXXFLAGS+=-g3' >> ${makefile}
	fi
	echo 'debug : re

# bread and butter
$(NAME) : $(BIN) $(LIB)' >> ${makefile}
	if [ ${language} = "c" ]; then
		echo '	$(CC) $(CFLAGS) $(INC) -o $@ $^' >> ${makefile}
	else
		echo '	$(CXX) $(CXXFLAGS) $(INC) -o $@ $^' >> ${makefile}
	fi
}
